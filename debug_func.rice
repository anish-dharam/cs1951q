fn apply_twice(f: _, x: _) -> _ {
    f(f(x))
}

fn compose(f: _, g: _) -> _ {
    \(x: _) -> _. f(g(x))
}

fn main() {
    let double = \(x: int) -> int. x * 2 in
    let increment = \(x: int) -> int. x + 1 in
    let result1 = apply_twice(double, 5) in
    let result2 = apply_twice(increment, 3) in
    let combined = compose(double, increment) in
    let result3 = combined(4) in
    println(int_to_string(result1));
    println(int_to_string(result2));
    println(int_to_string(result3))
}
